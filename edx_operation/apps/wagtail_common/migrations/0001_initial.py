# Generated by Django 4.2 on 2023-12-25 18:21

import colorfield.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import edx_operation.apps.core.utils.common
import taggit.managers


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="name"),
                ),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        max_length=100,
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default=edx_operation.apps.core.utils.common.random_color,
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="태그 컬러",
                    ),
                ),
            ],
            options={
                "verbose_name": "태그",
                "verbose_name_plural": "태그",
                "unique_together": {("name",)},
            },
        ),
        migrations.CreateModel(
            name="Tagging",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.CharField(db_index=True, max_length=50)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_tagged_items",
                        to="contenttypes.contenttype",
                        verbose_name="content type",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="wagtail_common.tag",
                    ),
                ),
            ],
            options={
                "verbose_name": "태깅",
                "verbose_name_plural": "태깅",
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tn_ancestors_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Ancestors pks",
                    ),
                ),
                (
                    "tn_ancestors_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Ancestors count"
                    ),
                ),
                (
                    "tn_children_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Children pks",
                    ),
                ),
                (
                    "tn_children_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Children count"
                    ),
                ),
                (
                    "tn_depth",
                    models.PositiveIntegerField(
                        default=0,
                        editable=False,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Depth",
                    ),
                ),
                (
                    "tn_descendants_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Descendants pks",
                    ),
                ),
                (
                    "tn_descendants_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Descendants count"
                    ),
                ),
                (
                    "tn_index",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Index"
                    ),
                ),
                (
                    "tn_level",
                    models.PositiveIntegerField(
                        default=1,
                        editable=False,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Level",
                    ),
                ),
                (
                    "tn_priority",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999),
                        ],
                        verbose_name="Priority",
                    ),
                ),
                (
                    "tn_order",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Order"
                    ),
                ),
                (
                    "tn_siblings_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Siblings pks",
                    ),
                ),
                (
                    "tn_siblings_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Siblings count"
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=50)),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="설명"),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="wagtail_common.Tagging",
                        to="wagtail_common.Tag",
                        verbose_name="태그",
                    ),
                ),
                (
                    "tn_parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tn_children",
                        to="wagtail_common.category",
                        verbose_name="Parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "카테고리",
                "verbose_name_plural": "카테고리",
                "ordering": ["tn_order"],
                "abstract": False,
            },
        ),
    ]
